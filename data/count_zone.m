udpt_no = 0;
udpt_disr = 0;
iwgl_no = 0;
iwgl_disr = 0;
uiwp_no = 0;
uiwp_disr = 0;
npl_no = 0;
npl_disr = 0;
lh_no = 0;
lh_disr = 0;
ila_no = 0;
ila_disr = 0;
divertor_disr = 0;
divertor_no = 0;
d4_disr = 0;
d4_no = 0;
beion_no = 0;
beion_disr = 0;
icrh_no = 0;
icrh_disr = 0;
undefined_no = 0;
undefined_disr = 0;

datavuv = importfile('data_vuv.xlsx');
ti_pulses = zeros(1, size(datavuv, 1));

for i = 1 : size(datavuv, 1)
    if datavuv.Disruption(i) == 0
        disr_flag = false;
    else
        disr_flag = true;
    end

    zone_val = string(datavuv.Zone(i));

    if contains(zone_val, "UDPT")
        if disr_flag
            udpt_disr = udpt_disr + 1;
        else
            udpt_no = udpt_no + 1;
        end

    elseif contains(zone_val, 'IWGL')
        if disr_flag
            iwgl_disr = iwgl_disr + 1;
        else
            iwgl_no = iwgl_no + 1;
        end

    elseif contains(zone_val, "UIWP")
        if disr_flag
            uiwp_disr = uiwp_disr + 1;
        else
            uiwp_no = uiwp_no + 1;
        end

    elseif contains(zone_val, "NPL")
        if disr_flag
            npl_disr = npl_disr + 1;
        else
            npl_no = npl_no + 1;
        end

    elseif contains(zone_val, "LH")
        if disr_flag
            lh_disr = lh_disr + 1;
        else
            lh_no = lh_no + 1;
        end

    elseif contains(zone_val, "ILA")
        if disr_flag
            ila_disr = ila_disr + 1;
        else
            ila_no = ila_no + 1;
        end

    elseif contains(zone_val, "Divertor")
        if disr_flag
            divertor_disr = divertor_disr + 1;
        else
            divertor_no = divertor_no + 1;
        end
    elseif contains(zone_val, "4D")
        if disr_flag
            d4_disr = d4_disr + 1;
        else
            d4_no = d4_no + 1;
        end
        % if disr_flag
        %     other_disr = other_disr + 1;
        % else
        %     other_no = other_no + 1;
        % end
    elseif contains(zone_val, "BEION")
        if disr_flag
            beion_disr = beion_disr + 1;
        else
            beion_no = beion_no + 1;
        end
    elseif contains(zone_val, "ICRH")
        if disr_flag
            icrh_disr = icrh_disr + 1;
        else
            icrh_no = icrh_no + 1;
        end
    elseif contains(zone_val, "NA")
        if disr_flag
            undefined_disr = undefined_disr + 1;
        else
            undefined_no = undefined_no + 1;
        end
    end
end


zone = ["UDPT"; "IWGL"; "UIWP"; "NPL"; "LH",;"ILA"; "Divertor"; "BEION"; "4D"; 'ICRH'; 'NA'];
disr = [udpt_disr; iwgl_disr; uiwp_disr; npl_disr; lh_disr; ila_disr; divertor_disr; beion_disr; d4_disr; icrh_disr; undefined_disr];
no_disr = [udpt_no; iwgl_no; uiwp_no; npl_no; lh_no; ila_no;  divertor_no; beion_no; d4_no; icrh_no; undefined_no];
tabla_zone = table(zone, disr, no_disr);

function datavuv1 = importfile(workbookFile, sheetName, dataLines)
%IMPORTFILE Import data from a spreadsheet
%  DATAVUV1 = IMPORTFILE(FILE) reads data from the first worksheet in
%  the Microsoft Excel spreadsheet file named FILE.  Returns the data as
%  a table.
%
%  DATAVUV1 = IMPORTFILE(FILE, SHEET) reads from the specified worksheet.
%
%  DATAVUV1 = IMPORTFILE(FILE, SHEET, DATALINES) reads from the
%  specified worksheet for the specified row interval(s). Specify
%  DATALINES as a positive scalar integer or a N-by-2 array of positive
%  scalar integers for dis-contiguous row intervals.
%
%  Example:
%  datavuv1 = importfile("C:\Users\Doctorando1\Documents\UFOs\data\data_vuv.xlsx", "Sheet1", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 07-May-2024 11:34:34

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 13);

% Specify sheet and range
opts.Sheet = sheetName;
opts.DataRange = dataLines(1, :);

% Specify column names and types
opts.VariableNames = ["VarName1", "Pulse", "OpCam", "Time", "ExpCam", "Disruption", "Comments", "MeasuredSpeed", "Comments_personal", "Initial_pos", "VUVKT2", "VUVComment", "Zone"];
opts.VariableTypes = ["double", "double", "double", "double", "categorical", "double", "string", "double", "string", "string", "categorical", "string", "categorical"];

% Specify variable properties
opts = setvaropts(opts, ["Comments", "Comments_personal", "Initial_pos", "VUVComment"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["ExpCam", "Comments", "Comments_personal", "Initial_pos", "VUVKT2", "VUVComment", "Zone"], "EmptyFieldRule", "auto");

% Import the data
datavuv1 = readtable(workbookFile, opts, "UseExcel", false);

for idx = 2:size(dataLines, 1)
    opts.DataRange = dataLines(idx, :);
    tb = readtable(workbookFile, opts, "UseExcel", false);
    datavuv1 = [datavuv1; tb]; %#ok<AGROW>
end

end